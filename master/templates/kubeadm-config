#!/bin/bash

set -e

create_kubeadm_config() {
    echo "Installing kubeadm.conf"
    case ${kubernetes_release} in
        1.2[23456].*)
            v1beta3
            ;;
        *)
            echo "Version ${kubernetes_release} not supported"
            exit 3
    esac
}

v1beta3() {
        cat <<EOF >$HOME/install/kubeadm.conf
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
certificateKey: ${master_certificate_key}
bootstrapTokens:
- token: "${boot_token}"
  description: "kubeadm bootstrap token"
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: "external"
localAPIEndpoint:
  advertiseAddress: "${advertise_ip}"
  bindPort: ${service_port}
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
apiServer:
  certSANs:
  - ${public_fqdn}
  - ${public_rdns}
  - ${public_ip}
clusterName: ${cluster_name}
kubernetesVersion: "v${kubernetes_release}"
controlPlaneEndpoint: "${public_ip}:${service_port}"
networking:
  dnsDomain: ${cluster_domainname}
  podSubnet: "${cluster_cidr}"
  serviceSubnet: "${service_cidr}"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDomain: ${cluster_domainname}
cgroupDriver: systemd
serverTLSBootstrap: ${secure_kublet}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: "${cluster_cidr}"
mode: ipvs
EOF
}

create_kubeadm_config
