#!/bin/bash

set -e

create_kubeadm_config() {
        echo "Installing kubeadm.conf"
        case ${kubernetes_release} in
                1.14.*)
        cat <<EOF >$HOME/install/kubeadm.conf
apiVersion: kubeadm.k8s.io/v1beta1
kind: InitConfiguration
bootstrapTokens:
- token: "${boot_token}"
  description: "kubeadm bootstrap token"
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: external
---
apiVersion: kubeadm.k8s.io/v1beta1
kind: ClusterConfiguration
apiServer:
  certSANs:
  - ${public_fqdn}
  - ${public_rdns}
  - ${public_ip}
  extraArgs:
    cloud-provider: external
clusterName: ${cluster_name}
controlPlaneEndpoint: "${public_ip}:${service_port}"
controllerManager:
  extraArgs:
    cloud-provider: external
kubernetesVersion: "v${kubernetes_release}"
networking:
  dnsDomain: ${cluster_domainname}
  podSubnet: ${cluster_cidr}
  serviceSubnet: ${service_cidr}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: ${cluster_cidr}
ipvs:
  scheduler: lc
mode: ipvs
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDomain: ${cluster_domainname}
cgroupDriver: systemd
EOF
                ;;
                1.1[5678].*)
        cat <<EOF >$HOME/install/kubeadm.conf
apiVersion: kubeadm.k8s.io/v1beta2
kind: InitConfiguration
certificateKey: ${master_certificate_key}
bootstrapTokens:
- token: "${boot_token}"
  description: "kubeadm bootstrap token"
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: external
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: ClusterConfiguration
apiServer:
  certSANs:
  - ${public_fqdn}
  - ${public_rdns}
  - ${public_ip}
  extraArgs:
    cloud-provider: external
clusterName: ${cluster_name}
controllerManager:
  extraArgs:
    cloud-provider: external
kubernetesVersion: "v${kubernetes_release}"
controlPlaneEndpoint: "${public_ip}:${service_port}"
networking:
  dnsDomain: ${cluster_domainname}
  podSubnet: ${cluster_cidr}
  serviceSubnet: ${service_cidr}
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
clusterCIDR: ${cluster_cidr}
ipvs:
  scheduler: lc
mode: ipvs
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
clusterDomain: ${cluster_domainname}
cgroupDriver: systemd
EOF
                ;;
	*)
		echo "Version ${kubernetes_release} not supported"
		exit 3
        esac
}

create_kubeadm_config
