#!/bin/bash

# Set script parameters here
discovery_ca_cert_hash=$(openssl x509 -noout -pubkey <<CA |openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1 | tr -d '\n'
${certificate_authority_pem}
CA
)
k8s_version="${kubernetes_release}"
#kubeadm_join_command="sudo kubeadm join --apiserver-advertise-address ${advertise_ip} --apiserver-bind-port ${service_port} --certificate-key ${master_certificate_key} --control-plane --discovery-token-ca-cert-hash sha256:$${discovery_ca_cert_hash} --token ${boot_token} ${fqdn}:${service_port}"
kubeadm_join_command="sudo kubeadm join --config /tmp/kubeadm.conf"
cat <<EOF | tee /tmp/kubeadm.conf
apiVersion: kubeadm.k8s.io/v1beta2
kind: JoinConfiguration
discovery:
  bootstrapToken:
    apiServerEndpoint: "${fqdn}:${service_port}"
    token: "${boot_token}"
    caCertHashes:
    - "sha256:$${discovery_ca_cert_hash}"
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: "external"
controlPlane:
  certificateKey: "${master_certificate_key}"
  localApiEndpoint:
    advertiseAddress: "${advertise_ip}"
    bindPort: ${service_port}
EOF

set -e

# Retries a command on failure.
# $1 - the max number of attempts
# $2... - the command to run
retry() {
    local max_attempts="$${1}"; shift
    local attempt_num=1

    until "$${@}"
    do
        if [ "$${attempt_num}" -eq "$${max_attempts}" ]
        then
            echo "Attempt $${attempt_num} failed and there are no more attempts l
eft!"
            return 1
        else
            echo "Attempt $${attempt_num} failed! Trying again in $${attempt_num}
seconds..."
            sleep $(( attempt_num=attempt_num + 1 ))
        fi
    done
}

install_cert() {
        local source_prefix=$${1}
        local dest_prefix=$${2:-$${1}}
        local target_suffix=$${3:-crt}
        local pki_dir=/etc/kubernetes/pki

        for word in $${target_suffix} key
        do
                sudo cp $${source_prefix}.$${word} $${pki_dir}/$${dest_prefix}.$${word}
        done
        sudo chmod 0600 $${pki_dir}/$${dest_prefix}.key
        rm $${source_prefix}.key
}

newer_cert() {
        local source_prefix=$${1}
        local dest_prefix=$${2:-$${1}}
        local target_suffix=$${3:-crt}
        local pki_dir=/etc/kubernetes/pki

        for word in $${target_suffix} key
        do
		if sudo test $${source_prefix}.$${word} -nt $${pki_dir}/$${dest_prefix}.$${word}
		then
			return 0
		fi
        done
	return 1
}

install_ca() {
        echo "Installing Updated CA"
        sudo mkdir -p /etc/kubernetes/pki/etcd
        install_cert ca
}
ensure_updated_ca() {
	if newer_cert ca
	then
		install_ca
		update_cert_configs
		echo "CA CERTS UPDATED - NODES NEED RESTARTING"
	fi
}

update_cert_configs() {
	sudo mv /etc/kubernetes/*.conf /tmp
	sudo kubeadm init phase kubeconfig all --config $HOME/install/kubeadm.conf
	sudo kubeadm alpha certs renew all
}

install() {
    echo "Joining Cluster Control Plane"
    retry 5 $${kubeadm_join_command}
}

ensure_admin_config() {
        echo "Installing admin config"
        mkdir -p $HOME/.kube
        sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config

        echo "Installing client cert generator"
        cat <<"CLIENTSCRIPT" | sudo tee /usr/local/bin/generate-client-cert.sh
#!/usr/bin/env bash

if [[ "$${#}" -lt 2 ]]; then
    echo "Usage: $${0} user group [group ...]"
    exit 1
fi

USER=$${1}; shift
GROUP=""
for word
do
  GROUP="$${GROUP}/O=$${word}"
done
CLUSTERENDPOINT=https://${public_fqdn}:${service_port}
CLUSTERNAME=${cluster_fqdn}
CACERT=/etc/kubernetes/pki/ca.crt
CAKEY=/etc/kubernetes/pki/ca.key
CLIENTCERTKEY=clients/$${USER}/$${USER}.key
CLIENTCERTCSR=clients/$${USER}/$${USER}.csr
CLIENTCERTCRT=clients/$${USER}/$${USER}.crt

if [ ! -r "$${CAKEY}" ]; then
    echo "Insufficent permissions to read $${CAKEY}"
    exit 1
fi

mkdir -p clients/$${USER}

openssl genrsa -out $${CLIENTCERTKEY} 4096
openssl req -new -key $${CLIENTCERTKEY} -out $${CLIENTCERTCSR} \
      -subj "/CN=$${USER}$${GROUP}"
openssl x509 -req -days 365 -sha256 -in $${CLIENTCERTCSR} -CA $${CACERT} -CAkey $${CAKEY} -set_serial 2 -out $${CLIENTCERTCRT}

cat <<-EOF > clients/$${USER}/kubeconfig
apiVersion: v1
kind: Config
preferences:
  colors: true
current-context: $${CLUSTERNAME}
clusters:
- name: $${CLUSTERNAME}
  cluster:
    server: $${CLUSTERENDPOINT}
    certificate-authority-data: |-
      $(base64 --wrap=0 $${CACERT})
contexts:
- context:
    cluster: $${CLUSTERNAME}
    user: $${USER}
  name: $${CLUSTERNAME}
users:
- name: $${USER}
  user:
    client-certificate-data: |-
      $(base64 --wrap=0 $${CLIENTCERTCRT})
    client-key-data: |-
      $(base64 --wrap=0 $${CLIENTCERTKEY})
EOF
CLIENTSCRIPT
        echo "Setting permissions"
        sudo chmod 755 /usr/local/bin/generate-client-cert.sh
}

ensure_docker_settings() {
        if [ ! -f /etc/docker/daemon.json ]
        then
                echo "Writing Updated Docker Configuration"
                cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "log-driver": "json-file",
  "live-restore": true,
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
                sudo systemctl reload docker
                sudo mkdir -p /etc/systemd/system/docker.service.d
                sudo systemctl daemon-reload
        fi
}

ensure_updated_apt_keys() {
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
}

upgrade() {
	ensure_updated_ca
    ensure_updated_apt_keys

	if [ -f /var/run/docker.sock ]
	then
		ensure_docker_settings
	fi
        #echo "Restarting docker service to ensure correct cgroup"
        #sudo systemctl restart docker
        echo "Kubeadm installed master detected - checking for upgrade"
        sudo apt-get -qq update -y
        sudo apt-get -qq install debconf-utils
	echo "docker.io docker.io/restart select true" | sudo debconf-set-selections
	echo "Upgrading kubeadm"
	if ! retry 5 sudo apt-get -qq -y --allow-change-held-packages install kubeadm=${kubernetes_release}-00
	then
		sudo apt-mark hold kubeadm
		echo "Failed to install kubeadm at version ${kubernetes_release}-00"
		echo "Version installed is at $(dpkg-query --showformat='$${Version}' --show kubeadm)"
		exit 2
	fi
	sudo apt-mark hold kubeadm
	echo "Upgrading control plane mirror"
    retry 5 sudo kubeadm upgrade apply -y ${kubernetes_release}
	echo "Upgrading kubelet"
	retry 5 sudo apt-get -qq -y --allow-change-held-packages install \
		kubectl=${kubernetes_release}-00 \
		kubelet=${kubernetes_release}-00
	sudo apt-mark hold kubelet kubectl
	retry 5 sudo systemctl restart kubelet
}

if [ "${kubernetes_release}" \< "1.15" ]; then
	echo "HA on version ${kubernetes_release} is not supported. Upgrade to 1.15 or newer"
	sleep 2
	exit 1
fi
if ss -lnt | grep -q :6443
then
        upgrade
else
        install
fi
ensure_admin_config
