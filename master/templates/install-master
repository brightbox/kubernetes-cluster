#!/bin/bash

set -e
APT_GET="sudo DEBIAN_FRONTEND=noninteractive NEEDRESTART_SUSPEND=1 apt-get -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef -qq -y"

newer_cert() {
        local source_prefix=$${1}
        local dest_prefix=$${2:-$${1}}
        local target_suffix=$${3:-crt}
        local pki_dir=/etc/kubernetes/pki

        for word in $${target_suffix} key
        do
                if ! sudo diff $${source_prefix}.$${word} $${pki_dir}/$${dest_prefix}.$${word}
                then
                        return 0
                fi
        done
        return 1
}


# Retries a command on failure.
# $1 - the max number of attempts
# $2... - the command to run
retry() {
    local max_attempts="$${1}"; shift
    local attempt_num=1

    until "$${@}"
    do
        if [ "$${attempt_num}" -eq "$${max_attempts}" ]
        then
            echo "Attempt $${attempt_num} failed and there are no more attempts l
eft!"
            return 1
        else
            echo "Attempt $${attempt_num} failed! Trying again in $${attempt_num}
seconds..."
            sleep $(( attempt_num=attempt_num + 1 ))
        fi
    done
}

install_ca() {
        echo "Installing Updated CA"
        local pki_dir=/etc/kubernetes/pki
        sudo mkdir -p "$${pki_dir}/etcd"
        sudo install --compare --mode=0600 -D "$${HOME}/ca.key" "$${pki_dir}/ca.key"
        sudo install --compare --mode=0644 -D "$${HOME}/ca.crt" "$${pki_dir}/ca.crt"
        rm "$${HOME}/ca.key"
}

install() {
        install_ca

        echo "Running kubeadm init"
        sudo kubeadm init --upload-certs --config $HOME/install/kubeadm.conf

        ensure_certs_in_kubelet_config
        retry 5 sudo systemctl restart kubelet
        ensure_admin_config
        ensure_ancillary_items
}

ensure_updated_ca() {
        if newer_cert ca
        then
                install_ca
                update_cert_configs
                echo "CA CERTS UPDATED - NODES NEED RESTARTING"
        fi
}

update_cert_configs() {
        sudo mv /etc/kubernetes/*.conf /tmp
        sudo kubeadm init phase kubeconfig all --config $HOME/install/kubeadm.conf
        sudo kubeadm certs renew all --config $HOME/install/kubeadm.conf
        sudo kubeadm init phase bootstrap-token --config $HOME/install/kubeadm.conf
        sudo kubeadm init phase upload-config all --config $HOME/install/kubeadm.conf
}

ensure_admin_config() {
        if [ -e /etc/kubernetes/admin.conf ]
        then
                echo "Installing admin config"
                mkdir -p $HOME/.kube
                sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
                sudo chown $(id -u):$(id -g) $HOME/.kube/config
        fi

        echo "Installing client cert generator"
        cat <<"CLIENTSCRIPT" | sudo tee /usr/local/bin/generate-client-cert.sh
#!/usr/bin/env bash

if [[ "$${#}" -lt 2 ]]; then
    echo "Usage: $${0} user group [group ...]"
    exit 1
fi

USER=$${1}; shift
GROUP=""
for word
do
  GROUP="$${GROUP}/O=$${word}"
done
CLUSTERENDPOINT=https://${public_fqdn}:${service_port}
CLUSTERNAME=${cluster_fqdn}
CACERT=/etc/kubernetes/pki/ca.crt
CAKEY=/etc/kubernetes/pki/ca.key
CLIENTCERTKEY=clients/$${USER}/$${USER}.key
CLIENTCERTCSR=clients/$${USER}/$${USER}.csr
CLIENTCERTCRT=clients/$${USER}/$${USER}.crt

if [ ! -r "$${CAKEY}" ]; then
    echo "Insufficent permissions to read $${CAKEY}"
    exit 1
fi

mkdir -p clients/$${USER}

openssl genrsa -out $${CLIENTCERTKEY} 4096
openssl req -new -key $${CLIENTCERTKEY} -out $${CLIENTCERTCSR} \
      -subj "/CN=$${USER}$${GROUP}"
openssl x509 -req -days 365 -sha256 -in $${CLIENTCERTCSR} -CA $${CACERT} -CAkey $${CAKEY} -set_serial 2 -out $${CLIENTCERTCRT}

cat <<-EOF > clients/$${USER}/kubeconfig
apiVersion: v1
kind: Config
preferences:
  colors: true
current-context: $${CLUSTERNAME}
clusters:
- name: $${CLUSTERNAME}
  cluster:
    server: $${CLUSTERENDPOINT}
    certificate-authority-data: |-
      $(base64 --wrap=0 $${CACERT})
contexts:
- context:
    cluster: $${CLUSTERNAME}
    user: $${USER}
  name: $${CLUSTERNAME}
users:
- name: $${USER}
  user:
    client-certificate-data: |-
      $(base64 --wrap=0 $${CLIENTCERTCRT})
    client-key-data: |-
      $(base64 --wrap=0 $${CLIENTCERTKEY})
EOF
CLIENTSCRIPT
        echo "Setting permissions"
        sudo chmod 755 /usr/local/bin/generate-client-cert.sh
}

ensure_ancillary_items() {
        #echo "Patching kube-proxy scheduling tolerations"
        #if ! kubectl -n kube-system patch ds kube-proxy -p='{ "spec": { "template": { "metadata": { "annotations": { "scheduler.alpha.kubernetes.io/critical-pod": "" } }, "spec": { "priorityClassName": "system-node-critical", "tolerations": [{ "key": "CriticalAddonsOnly", "operator": "Exists" }, { "operator": "Exists" }] } } } }'
        #then
        #        echo "Patch already applied - skipping"
        #fi

        #echo "Adjusting taints until better tolerated"
        #kubectl taint node -l node-role.kubernetes.io/control-plane='' node-role.kubernetes.io/control-plane:NoSchedule- || true

        echo "Refreshing Pod Disruption Budget for kube-dns"
        retry 5 kubectl apply -f - <<-MANIFEST
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: coredns-pdb
  namespace: kube-system
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: kube-dns
MANIFEST

        case "${calico_release}" in
            3.2[3-9]*)
                ;;
            *)
                echo "Calico release ${calico_release} is too old. Needs to be at least 3.23 to support IPv6 VXLAN"
                echo "Aborting"
                exit 1
                ;;
        esac

        echo "Installing Calico network controllers"
        retry 5 curl -Lsf "https://raw.githubusercontent.com/projectcalico/calico/v${calico_release}/manifests/calico-vxlan.yaml" |
            sed 's/"type": "calico-ipam"/&,"assign_ipv4":"true","assign_ipv6":"true"/' |
            kubectl apply -f -

        echo "Setting IP/IPv6 autodetect"
        retry 5 kubectl set env daemonset/calico-node -n kube-system -c calico-node \
            FELIX_IPV6SUPPORT=true \
            IP=autodetect \
            IP6=autodetect \
            CALICO_IPV4POOL_NAT_OUTGOING=true \
            CALICO_IPV6POOL_NAT_OUTGOING=true \
            IP_AUTODETECTION_METHOD=cidr=10.0.0.0/8 \
            IP6_AUTODETECTION_METHOD=cidr=2a02:1348::/32 \
            CLUSTER_TYPE=kubeadm,k8s

        echo "Patching default IPv4 pool (if required)"
        if kubectl get ippools/default-ipv4-ippool -o json --ignore-not-found | grep -q vxlanMode
        then
             kubectl patch ippools/default-ipv4-ippool \
             --type='json' \
             -p '[{"op": "replace", "path": "/spec/ipipMode", "value": "Never"}, {"op": "replace", "path": "/spec/vxlanMode", "value": "CrossSubnet"}]'
        fi

        case "${storage_system}" in
            manual)
                ;;
            openebs)
                echo "Installing OpenEBS storage controllers"
                retry 5 kubectl apply -f \
                    https://openebs.github.io/charts/openebs-operator.yaml
                ;;
            *) 
                echo "Unknown storage system ${storage_system}"
                ;;
        esac


        if [ "${manage_autoscaler}" = "true" ]
        then
            echo "Requesting Vertical Autoscaler activation"
            autoscaler_manifest | retry 5 kubectl -n kube-system apply -f -
        fi
}

ensure_certs_in_kubelet_config() {
        if sudo test -f /var/lib/kubelet/pki/kubelet-client-current.pem
        then
                sudo sed -i 's/client-certificate-data: .*$/client-certificate: \/var\/lib\/kubelet\/pki\/kubelet-client-current.pem/
                        s/client-key-data: .*$/client-key: \/var\/lib\/kubelet\/pki\/kubelet-client-current.pem/' /etc/kubernetes/kubelet.conf
        fi
}

ensure_docker_settings() {
        if [ ! -f /etc/docker/daemon.json ]
        then
                echo "Writing Updated Docker Configuration"
                cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "log-driver": "json-file",
  "live-restore": true,
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
                sudo systemctl reload docker
                sudo mkdir -p /etc/systemd/system/docker.service.d
                sudo systemctl daemon-reload
        fi
}

ensure_updated_apt_keys() {
    local rel=${kubernetes_release}
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v$${rel%.*}/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$${rel%.*}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo rm -f /etc/apt/sources.list.d/kubernetes-old.list /etc/apt/sources.list.d/docker.list /usr/share/keyrings/kubernetes.gpg
}

upgrade() {
        ensure_updated_apt_keys

        if [ -f /var/run/docker.sock ]
        then
                ensure_docker_settings
        fi
        #echo "Restarting docker service to ensure correct cgroup"
        #sudo systemctl restart docker
        echo "Kubeadm installed master detected - checking for upgrade"
        $${APT_GET} update
        $${APT_GET} install debconf-utils
        echo "docker.io docker.io/restart select true" | sudo debconf-set-selections
        # Upgrade cri-tools before upgrading kubeadm to avoid CRI API incompatibility
        echo "Upgrading cri-tools"
        if ! cri_rel=$(apt-cache madison "cri-tools" | grep -Po -m 1 "(?<= )${critools_release}[^ ]*")
        then
            cri_rel="${critools_release}"
        fi
        if ! retry 5 $${APT_GET} --allow-change-held-packages --allow-downgrades install cri-tools=$${cri_rel}
        then
                sudo apt-mark hold cri-tools
                echo "Failed to install cri-tools at version $${cri_rel}"
                echo "Version installed is at $(dpkg-query --showformat='$${Version}' --show cri-tools)"
                return 2
        fi
        sudo apt-mark hold cri-tools
        echo "Upgrading kubeadm"
        if ! kube_rel=$(apt-cache madison "kubeadm" | grep -Po -m 1 "(?<= )${kubernetes_release}[^ ]*")
        then
            kube_rel="${kubernetes_release}"
        fi
        if ! retry 5 $${APT_GET} --allow-change-held-packages --allow-downgrades install kubeadm=$${kube_rel}
        then
                sudo apt-mark hold kubeadm
                echo "Failed to install kubeadm at version $${kube_rel}"
                echo "Version installed is at $(dpkg-query --showformat='$${Version}' --show kubeadm)"
                return 2
        fi
        sudo apt-mark hold kubeadm
        ensure_updated_ca
	plan=$(sudo kubeadm upgrade plan ${kubernetes_release})
	case "$${plan}" in
	*"kubeadm upgrade apply"*)
                retry 5 sudo kubeadm upgrade apply -y ${kubernetes_release}
                echo "Upgrading kubelet"
                retry 5 $${APT_GET} --allow-change-held-packages --allow-downgrades install \
                        kubectl=$${kube_rel} \
                        kubelet=$${kube_rel} \
                        containerd
                sudo apt-mark hold kubelet kubectl
                ensure_certs_in_kubelet_config
                retry 5 sudo systemctl restart kubelet
		;;
    *)  echo "Already at version ${kubernetes_release} or greater - refreshing certificates"
		echo $${plan}
        retry 5 sudo kubeadm init phase upload-certs --upload-certs --config $HOME/install/kubeadm.conf
		;;
	esac
    ensure_admin_config
    ensure_ancillary_items
}

if ss -lnt | grep -q :6443
then
        upgrade
else
        install
fi
