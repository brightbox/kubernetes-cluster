#!/bin/bash

set -e
APT_GET="sudo DEBIAN_FRONTEND=noninteractive NEEDRESTART_SUSPEND=1 apt-get -o Dpkg::Options::=--force-confold -o Dpkg::Options::=--force-confdef -qq -y"

# Retries a command on failure.
# $1 - the max number of attempts
# $2... - the command to run
retry() {
    local max_attempts="$${1}"; shift
    local attempt_num=1

    until "$${@}"
    do
        if [ "$${attempt_num}" -eq "$${max_attempts}" ]
        then
            echo "Attempt $${attempt_num} failed and there are no more attempts l
eft!"
            return 1
        else
            echo "Attempt $${attempt_num} failed! Trying again in $${attempt_num}
seconds..."
            sleep $(( attempt_num=attempt_num + 1 ))
        fi
    done
}

ensure_docker_settings() {
	if [ ! -f /etc/docker/daemon.json ]
	then
		echo "Writing Updated Docker Configuration"
		cat <<EOF | sudo tee /etc/docker/daemon.json
{
  "log-driver": "json-file",
  "live-restore": true,
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF
		sudo systemctl reload docker
		sudo mkdir -p /etc/systemd/system/docker.service.d
		sudo systemctl daemon-reload
	fi
}

ensure_updated_apt_keys() {
    local rel=${kubernetes_release}
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://pkgs.k8s.io/core:/stable:/v$${rel%.*}/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v$${rel%.*}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
    sudo rm -f /etc/apt/sources.list.d/docker.list /etc/apt/sources.list.d/kubernetes-old.list /usr/share/keyrings/kubernetes.gpg
}

echo "Ensuring installation has completed"
cloud-init status --wait >/dev/null

echo "Checking for upgrades"
if [ -f /var/run/docker.sock ]
then
	ensure_docker_settings
fi

sudo systemctl enable iscsid && sudo systemctl start iscsid
ensure_updated_apt_keys
$${APT_GET} update
$${APT_GET} install debconf-utils lvm2 nfs-common
echo "docker.io docker.io/restart select true" | sudo debconf-set-selections
# Upgrade cri-tools before upgrading kubeadm to avoid CRI API incompatibility
echo "Upgrading cri-tools"
if ! cri_rel=$(apt-cache madison "cri-tools" | grep -Po -m 1 "(?<= )${critools_release}[^ ]*")
then
    cri_rel="${critools_release}"
fi
if ! retry 5 $${APT_GET} --allow-change-held-packages --allow-downgrades install cri-tools="$${cri_rel}"
then
	sudo apt-mark hold cri-tools
	echo "Failed to install cri-tools at version $${cri_rel}"
	echo "Version installed is at $(dpkg-query --showformat='$${Version}' --show cri-tools)"
	exit 2
fi
sudo apt-mark hold cri-tools
echo "Upgrading kubeadm"
if ! kube_rel=$(apt-cache madison "kubeadm" | grep -Po -m 1 "(?<= )${kubernetes_release}[^ ]*")
then
    kube_rel="${kubernetes_release}"
fi
if ! retry 5 $${APT_GET} --allow-change-held-packages --allow-downgrades install kubeadm="$${kube_rel}"
then
	sudo apt-mark hold kubeadm
	echo "Failed to install kubeadm at version $${kube_rel}"
	echo "Version installed is at $(dpkg-query --showformat='$${Version}' --show kubeadm)"
	exit 2
fi
sudo apt-mark hold kubeadm
echo "Upgrading worker node"
retry 5 sudo kubeadm upgrade node
echo "Upgrading kubelet"
retry 5 $${APT_GET} --allow-change-held-packages --allow-downgrades install \
	kubectl="$${kube_rel}" \
	kubelet="$${kube_rel}" \
    containerd
sudo apt-mark hold kubelet kubectl
retry 5 sudo systemctl restart kubelet
