#!/bin/bash
# Set script parameters here
export DEBIAN_FRONTEND=noninteractive
export NEEDRESTART_SUSPEND=1

discovery_ca_cert_hash=$(openssl x509 -noout -pubkey <<CA |openssl rsa -pubin -outform DER 2>/dev/null | sha256sum | cut -d' ' -f1 | tr -d '\n'
${certificate_authority_pem}
CA
)
k8s_version="${kubernetes_release}"
critools_version="${critools_release}"
kubeadm_join_command="kubeadm join --config /tmp/kubeadm.conf"
storage_system="${storage_system}"
openebs_mount='/var/openebs/local'
cat <<EOF | tee /tmp/kubeadm.conf
apiVersion: kubeadm.k8s.io/v1beta3
kind: JoinConfiguration
discovery:
  bootstrapToken:
    apiServerEndpoint: "${fqdn}:${service_port}"
    token: "${boot_token}"
    caCertHashes:
    - "sha256:$${discovery_ca_cert_hash}"
nodeRegistration:
  kubeletExtraArgs:
    cloud-provider: "external"
EOF

set -e

# Retries a command on failure.
# $1 - the max number of attempts
# $2... - the command to run
retry() {
    local max_attempts="$${1}"; shift
    local attempt_num=1

    until "$${@}"
    do
        if [ "$${attempt_num}" -eq "$${max_attempts}" ]
        then
            echo "Attempt $${attempt_num} failed and there are no more attempts l
eft!"
            return 1
        else
            echo "Attempt $${attempt_num} failed! Trying again in $${attempt_num}
seconds..."
            sleep $(( attempt_num=attempt_num + 1 ))
        fi
    done
}

# Installing worker

echo "writing config files"
mkdir -p /etc/cni/net.d
cat <<EOF | tee /etc/cni/net.d/99-loopback.conf
{
"cniVersion": "0.3.1",
"type": "loopback"
}
EOF


cat <<EOF | tee /etc/sysctl.d/40-kubernetes.conf
net.ipv6.conf.all.forwarding=1
net.ipv4.ip_forward=1
net.bridge.bridge-nf-call-ip6tables=1
net.bridge.bridge-nf-call-iptables=1
EOF

echo "Resetting sysctl"
retry 5 modprobe -- br_netfilter
retry 5 sysctl --system

export DEBIAN_FRONTEND=noninteractive

echo "Adding repositories"
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/kubernetes.gpg
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /usr/share/keyrings/docker.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo rm -f /etc/apt/sources.list.d/docker.list
#echo "deb [signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list

echo "Upgrading existing Packages"
apt-get -qq -y update
apt-get -qq -y upgrade

echo "Installing versioned packages"
apt-get -qq -y --allow-change-held-packages install \
	language-pack-en \
	socat \
	conntrack \
	ipset \
	debconf-utils \
	containerd \
	glusterfs-client \
	kubeadm=$${k8s_version}-00 \
	kubectl=$${k8s_version}-00 \
	kubelet=$${k8s_version}-00 \
	cri-tools=$${critools_version}-00

apt-mark hold kubelet kubeadm kubectl cri-tools

echo "Selecting iptables version"
if update-alternatives --set iptables /usr/sbin/iptables-legacy
then
	update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy || true
	update-alternatives --set arptables /usr/sbin/arptables-legacy || true
	update-alternatives --set ebtables /usr/sbin/ebtables-legacy || true
fi

echo "Installing bash completion"
kubectl completion bash | tee /etc/bash_completion.d/kubectl >/dev/null 2>&1

if [ -d /run/containerd ]
then
	echo "Make containerd CRI v1 runtime use systemd cgroup"
	mkdir -p /etc/containerd
	cat <<EOF | tee /etc/containerd/config.toml
version = 2

[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  runtime_type = "io.containerd.runc.v2"

[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
  SystemdCgroup = true
EOF
systemctl reload-or-restart containerd

	echo "Setting up critools"
	cat <<EOF | tee /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock
EOF
fi

echo "Activating kubelet bootstrap services"
systemctl enable kubelet.service

echo "Making time sync run more often"
cat <<EOF | tee /etc/systemd/timesyncd.conf
[Time]
PollIntervalMaxSec=1024
EOF
systemctl try-restart systemd-timesyncd

retry 5 systemctl enable iscsid
retry 5 systemctl start iscsid

partprobe
case $${storage_system} in
    manual)
        mkdir /var/local/disk
        ;;
    openebs)
        echo "Setting up storage partition"
        mkfs -t ext4 /dev/vda2
        echo "/dev/vda2 $${openebs_mount} ext4 defaults 0 0" >> /etc/fstab
        mkdir -p "$${openebs_mount}"
        mount "$${openebs_mount}"
        ;;
    *)
        echo "Unknown storage system $${storage_system}"
        ;;
esac

echo "Joining cluster"
retry 5 $${kubeadm_join_command}
